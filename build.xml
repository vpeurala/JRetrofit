<?xml version="1.0" encoding="utf-8"?>
<project name="JRetrofit" default="build">
	<target name="build" depends="set_global_variables, clean_before, compile, test, jar, javadoc, generate_website" description="Build the project locally." />

	<target name="publish" depends="set_global_variables, check_remote_credentials, build, clean_remote, copy_jars, copy_website" description="Build and publish the project to paloalto.laughingpanda.org." />

	<target name="set_global_variables">
		<property name="version" value="1.0" />
		<property name="publication_server" value="paloalto.laughingpanda.org" />
		<property name="publication_dir" value="/var/www/localhost/htdocs" />
		<property name="publication_maven1_dir" value="${publication_dir}/maven/jretrofit/jars" />
		<property name="publication_maven1_jar" value="${publication_maven1_dir}/jretrofit-${version}.jar" />
		<property name="publication_maven2_dir" value="${publication_dir}/maven2/jretrofit/jretrofit" />
		<property name="publication_maven2_jar" value="${publication_maven2_dir}/${version}/jretrofit-${version}.jar" />
		<property name="publication_website" value="${publication_dir}/projects/jretrofit" />
		<fail unless="jvm">
Missing mandatory command line parameters.

You must give property 'jvm' on the command line
when running the build.
The value of the property must be a 'java' executable 
installed on your machine.

For example:
  ant -Djvm=/opt/jdk1.3.1_19/bin/java (on Linux), or
  ant -Djvm=C:/jdk1.3.1_19/bin/java (on Windows).

It is recommended that you use a JDK 1.3 JVM,
because this project must work on 1.3.
		</fail>
	</target>

	<target name="clean_before">
		<delete dir="build" />
		<mkdir dir="build" />
		<mkdir dir="build/clean_classes" />
		<mkdir dir="build/instrumented_classes" />
		<mkdir dir="build/test_classes" />
		<mkdir dir="build/coverage" />
		<mkdir dir="build/lib" />
		<mkdir dir="build/javadoc" />
		<mkdir dir="build/website" />
		<mkdir dir="build/dist" />
	</target>

	<target name="compile">
		<javac srcdir="src" destdir="build/clean_classes" encoding="utf-8" source="1.3" target="1.3" debug="true" debuglevel="lines, vars, source" />
		<javac srcdir="src" destdir="build/instrumented_classes" encoding="utf-8" source="1.3" target="1.3" debug="true" debuglevel="lines, vars, source" />
		<javac srcdir="test" destdir="build/test_classes" encoding="utf-8" source="1.3" target="1.3" debug="true" debuglevel="lines, vars, source">
			<classpath>
				<pathelement location="build/instrumented_classes" />
				<fileset dir="lib">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</javac>
	</target>

	<target name="test">
		<taskdef resource="tasks.properties">
			<classpath>
				<fileset dir="lib" />
			</classpath>
		</taskdef>
		<cobertura-instrument datafile="build/coverage/cobertura.ser">
			<fileset dir="build/instrumented_classes" />
		</cobertura-instrument>
		<junit fork="yes" jvm="${jvm}" printsummary="no" errorProperty="test.failed" failureProperty="test.failed">
			<sysproperty key="net.sourceforge.cobertura.datafile" file="build/coverage/cobertura.ser" />
			<classpath>
				<pathelement location="build/instrumented_classes" />
				<pathelement location="build/test_classes" />
				<fileset dir="lib">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
			<formatter type="brief" usefile="false" />
			<batchtest todir="build/test_classes">
				<fileset dir="build/test_classes">
					<include name="**/*Test.class" />
					<!-- 
					Don't run performance tests on build,
					they take too long. Run them separately
					if you are interested about performance
					results.
					-->
					<exclude name="**/*PerformanceTest.class" />
				</fileset>
			</batchtest>
		</junit>
		<fail if="test.failed">There were failing unit tests.</fail>
		<cobertura-report format="html" srcdir="src" destdir="build/coverage" datafile="build/coverage/cobertura.ser" />
		<cobertura-check branchrate="100" linerate="100" datafile="build/coverage/cobertura.ser" />
	</target>

	<target name="jar">
		<jar destfile="build/lib/jretrofit-${version}.jar" basedir="build/clean_classes" />
	</target>

	<target name="javadoc">
		<javadoc destdir="build/javadoc" sourcepath="src" public="true" />
	</target>

	<target name="generate_website">
		<exec dir="website" executable="webgen.cmd" os="Windows 2000, Windows 95, Windows 98, Windows NT, Windows XP">
		</exec>
		<exec dir="website" executable="webgen" os="AIX, Digital Unix, FreeBSD, HP UX, Irix, Linux, Mac OS, MPE/iX, Netware 4.11, OS/2, Solaris">
		</exec>
		<move todir="build/website">
			<fileset dir="website/output" />
		</move>
		<copy todir="build/website/Coverage" overwrite="true">
			<fileset dir="build/coverage" />
		</copy>
		<copy todir="build/website/Javadoc" overwrite="true">
			<fileset dir="build/javadoc" />
		</copy>
		<copy file="build/lib/jretrofit-${version}.jar" todir="build/website" overwrite="true" />
	</target>

	<target name="check_remote_credentials">
		<fail unless="username">
Missing mandatory command line parameters.

You must give a valid username and password 
to server paloalto.laughingpanda.org
on the command line if you want to publish this project.

For example:
  ant -Dusername=foo -Dpassword=bar
		</fail>
		<fail unless="password">
Missing mandatory command line parameters.

You must give a valid username and password 
to server paloalto.laughingpanda.org
on the command line if you want to publish this project.

For example:
  ant -Dusername=foo -Dpassword=bar
		</fail>
	</target>

	<target name="clean_remote">
		<property name="delete_maven1_jar_command" value="rm ${publication_maven1_jar}" />
		<property name="delete_maven2_jar_command" value="rm ${publication_maven2_jar}" />
		<property name="delete_website_dir_command" value="rm -r ${publication_website}" />
		<property name="create_maven2_version_dir_command" value="mkdir ${publication_maven2_dir}/${version}" />
		<property name="create_website_dir_command" value="mkdir ${publication_website}" />
		<sshexec host="${publication_server}" trust="true" username="${username}" password="${password}" command="${delete_maven1_jar_command}; ${delete_maven2_jar_command}; ${delete_website_dir_command}; ${create_maven2_version_dir_command}; ${create_website_dir_command};" />
	</target>

	<target name="copy_jars">
		<scp todir="${username}:${password}@${publication_server}:${publication_maven1_dir}" file="build/lib/jretrofit-${version}.jar" trust="true" />
		<scp todir="${username}:${password}@${publication_server}:${publication_maven2_dir}/${version}" file="build/lib/jretrofit-${version}.jar" trust="true" />
	</target>

	<target name="copy_website">
		<scp todir="${username}:${password}@${publication_server}:${publication_website}" trust="true">
			<fileset dir="build/website" />
		</scp>
	</target>
</project>
